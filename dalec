#!/bin/sh
#
# TODO:
#     Add more error checking. Always check if file exist before reading it
#

DALEC_VERSION='0.1.2'

LOG="/tmp/dalec"

FAILURE=1
SUCCESS=0

check_size()
{
  size=$1

  if [ "$size" -le "1024" ]; then
    echo "1"
  elif [ "$size" -le "2048" ]; then
    echo "2"
  elif [ "$size" -le "4096" ]; then
    echo "4"
  elif [ "$size" -le "8192" ]; then
    echo "8"
  elif [ "$size" -le "16384" ]; then
    echo "16"
  elif [ "$size" -le "32768" ]; then
    echo "32"
  elif [ "$size" -le "65536" ]; then
    echo "64"
  elif [ "$size" -le "131072" ]; then
    echo "128"
  elif [ "$size" -le "262144" ]; then
    echo "256"
  elif [ "$size" -le "524288" ]; then
    echo "512"
  elif [ "$size" -le "1048576" ]; then
    echo "1024"
  elif [ "$size" -le "2097152" ]; then
    echo "2048"
  elif [ "$size" -le "4194304" ]; then
    echo "4096"
  elif [ "$size" -le "8388608" ]; then
    echo "8092"
  else
    echo ">8092"
  fi
}

# Get the kernel version
#
#   Arguments:
#         log = Path to log file
#
get_kernel()
{
  log=$1
  release_file='/proc/sys/kernel/osrelease'

  if [ -f $release_file ]; then
    kernel="$(cat $release_file)"
  else
    kernel=''
  fi
  printf "KERNEL=%s\n" "$kernel"  >> $log
}


# Collect version string with build infos
#
#   Arguments:
#         log = Path to log file
#
get_version()
{
  log=$1

  printf "VERSION=%s\n" "$(cat /proc/sys/kernel/version)"  >> $log
}

# Collect network interface data
#
#   Arguments:
#         log - Path to log file
#
get_nic_count()
{
  log="$1"

  net_dir="/sys/class/net/"
  interface_list="$(ls "$net_dir")"
  addr=''
  for intf in $interface_list
  do
    if [ -z "$intf" ]; then
      addr=0
      break
    fi

    if [ ! "$intf" == "lo" ]; then
      addr="$addr $(cat /sys/class/net/$intf/address)"
    fi
  done

  printf "INTERFACE_COUNT=%s\n" "$(echo $addr | tr ' ' '\n' | sort -u | wc -l)"  >> $log
}


# Collect Data on CPU
#
#   Arguemnts:
#         log - Path to log file
#
get_cpu_data()
{
  log=$1

  model="$(awk -F '[[:space:]]+:[[:space:]]' '/model/ {print $2;exit}' /proc/cpuinfo)"
  model_name="$(awk -F '[[:space:]]+:[[:space:]]' '/model name/ {print $2;exit}' /proc/cpuinfo)"
  systype="$(awk -F '[[:space:]]+:[[:space:]]' '/system/ {print $2;exit}' /proc/cpuinfo)"
  machine="$(awk -F '[[:space:]]+:[[:space:]]' '/machine/ {print $2;exit}' /proc/cpuinfo)"
  vendor_id="$(awk -F '[[:space:]]+:[[:space:]]' '/vendor_id/ {print $2;exit}' /proc/cpuinfo)"
  num_cores=$(awk '/^core/ {print $0}' /proc/cpuinfo  | sort -u | wc -l)
  num_proc=$(awk '/^process/ {print $0}' /proc/cpuinfo  | sort -u | wc -l)
  { printf "MODEL=%s\n" "$model"; \
  printf "MODEL_NAME=%s\n" "$model_name"; \
  printf "SYSTEM_TYPE=%s\n" "$systype"; \
  printf "MACHINE=%s\n" "$machine"; \
  printf "VENDOR_ID=%s\n" "$vendor_id"; \
  printf "CORE_THREADS=%s:%s\n" "$num_cores" "$num_proc"; } >> $log
}


# Collect Memory data
#
#   Arguments:
#         log - Path to log file
#
get_memdata()
{
  log="$1"
  printf "TOTALMEM=%s\n" $(check_size $(awk '/MemTotal:/{print $2}' /proc/meminfo)) >> $log
  printf "AVAILMEM=%s\n" $(check_size $(awk '/MemAvaila/{print $2}' /proc/meminfo)) >> $log
}


# Get the uptime of a system
#
# Arguments:
#         log - Path to log file
#
get_uptime()
{
  log=$1
  time="$(awk '{print $1}' /proc/uptime)"
  printf "UPTIME=%s\n" $time >> $log
}


# Get the number of dhcp leases
#
# Arguments:
#       log - Path to logfile
#
get_lease_count()
{
  log=$1
  printf "LEASE_COUNT=%s\n" "$(awk 'END{print NR}' /tmp/dhcp.leases)" >> $log
}


# Collect information about the network parameter
#
# This includes:
#   - number of dhcp leases
#   - nic vendor
#
# Arguments:
#         log - Path to log file
#
collect_network()
{
  log="$1"
  network_log="$1/network.log"

  if [ ! -f $network_log ]; then
    touch $network_log
  else
    echo '' > $network_log
  fi

  get_nic_count $network_log
  get_lease_count $network_log
}


# Start basic scanning
#
# This includes only most basic, no personal identifieable information:
#   - Uptime
#   - kernel version
#   - release string
#   - Ram size
#   - number of Cores
#   - disk size
#   - Architecture
#
# Arguments:
#         log - Path to log directory
#
collect_basics()
{
  basic_log="$1"

  if [ ! -f $basic_log ]; then
    touch $basic_log
  fi

  printf "DALEC_VERSION=%s\n" "$DALEC_VERSION" > $basic_log
  get_uptime $basic_log
  get_cpu_data $basic_log
  get_memdata $basic_log
  get_kernel $basic_log
}


# collect extensive system information
#
# includes basic and ...
# in addition to this all also collects:
#
# Arguments:
#       log_p - path to log directory
#
collect_all()
{
  log_p="$1"
  ext_log="$log_p/extended.log"
  collect_basics "$ext_log"
  get_version "$ext_log"
  collect_network "$log_p"
}


# print help message
#
call_help()
{
  printf "Collect data from linux systems\n"
  printf "\t -a, --all:\t collect all information\n"
  printf "\t -c, --config:\t provide path to config file\n"
  printf "\t -h, --help:\t print this help\n"
  printf "\t -l, --log:\t set path for logfile\n"
  printf "\t -n, --network:\t collect network information\n"
  printf "\t -v, --version:\t print version of script\n"
}


# include config file
#
read_config()
{
  conf_path="$1"
  source $conf_path
}


# main function
#
# Arguments:
# args - command line arguments
#
main()
{
  args="$@"
  options=ac:hl:nv
  loptions=all,config:,help,log:,network,version
  command='basic'


  parsed=$(getopt -a -o $options --long $loptions -- $args)
  if [ "$?" != "0" ]; then
    call_help
    exit $FAILURE
  fi

  eval set -- "$parsed"

  while true; do
    case "$1" in
      "-a" | "--all")
        command='all';
        shift
        ;;
      "-c" | "--config")
        read_config "$2";
        shift 2
        ;;
      "-h" | "--help")
        call_help;
        exit
        ;;
      "-l" | "--log")
        c_log="$2";
        shift 2
        ;;
      "-n" | "--network")
        command="$command network"
        shift
        ;;
      "-v" | "--version")
        printf "Version: $VERSION\n"
        exit
        ;;
      " ")
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        printf "Error: Wrong or missing input ($1)! Usage:\n"
        call_help
        exit $FAILURE
        ;;
    esac
  done

  if [ -z $c_log ]; then
    log=$LOG
  else
    log=$c_log
  fi

  if [ ! -d "$log" ]; then
    mkdir -p "$log"
  fi

  for c in $(echo $command | tr ' ' '\n'); do
    case "$c" in
      basic)
        collect_basics "$log/basic.log"
        ;;
      network)
        ;;
      all)
        collect_all "$log"
        ;;
    esac
  done
}


main "$@"
